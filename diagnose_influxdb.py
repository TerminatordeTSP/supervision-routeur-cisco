#!/usr/bin/env python3
"""
Script de diagnostic InfluxDB pour v√©rifier les donn√©es collect√©es
"""

import requests
import json
from datetime import datetime, timedelta
import sys

# Configuration InfluxDB
INFLUX_URL = "http://localhost:8086"
INFLUX_TOKEN = "BQSixul3bdmN-KtFDG_BPfUgSDGc1ZIntJ-QYa2fiIQjA_2psFN2z21AOmxD2s8fpStGlj8YWyvTCckOeCrFJA=="
INFLUX_ORG = "telecom-sudparis"
INFLUX_BUCKET = "router-metrics"

def test_influxdb_connection():
    """Test la connexion √† InfluxDB"""
    print("üîÑ Test de connexion √† InfluxDB...")
    try:
        response = requests.get(f"{INFLUX_URL}/ping", timeout=5)
        if response.status_code == 204:
            print("‚úÖ InfluxDB est accessible")
            return True
        else:
            print(f"‚ùå InfluxDB r√©pond avec le code {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion InfluxDB: {e}")
        return False

def query_influxdb(query):
    """Ex√©cute une requ√™te Flux sur InfluxDB"""
    headers = {
        'Authorization': f'Token {INFLUX_TOKEN}',
        'Content-Type': 'application/vnd.flux'
    }
    
    try:
        response = requests.post(
            f"{INFLUX_URL}/api/v2/query?org={INFLUX_ORG}",
            headers=headers,
            data=query,
            timeout=10
        )
        
        if response.status_code == 200:
            return response.text
        else:
            print(f"‚ùå Erreur requ√™te InfluxDB: {response.status_code}")
            print(f"   R√©ponse: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå Erreur lors de la requ√™te: {e}")
        return None

def check_bucket_data():
    """V√©rifie les donn√©es dans le bucket"""
    print(f"üîÑ V√©rification des donn√©es dans le bucket '{INFLUX_BUCKET}'...")
    
    query = f'''
    from(bucket: "{INFLUX_BUCKET}")
      |> range(start: -1h)
      |> group(columns: ["_measurement"])
      |> count()
    '''
    
    result = query_influxdb(query)
    if result:
        print("‚úÖ Donn√©es trouv√©es dans le bucket:")
        print(result)
        return True
    else:
        print("‚ùå Aucune donn√©e trouv√©e dans le bucket")
        return False

def check_snmp_metrics():
    """V√©rifie les m√©triques SNMP sp√©cifiques"""
    print("üîÑ V√©rification des m√©triques SNMP...")
    
    query = f'''
    from(bucket: "{INFLUX_BUCKET}")
      |> range(start: -30m)
      |> filter(fn: (r) => r["_measurement"] == "snmp")
      |> group(columns: ["_field"])
      |> count()
    '''
    
    result = query_influxdb(query)
    if result:
        print("‚úÖ M√©triques SNMP trouv√©es:")
        print(result)
        return True
    else:
        print("‚ùå Aucune m√©trique SNMP trouv√©e")
        return False

def check_latest_metrics():
    """V√©rifie les derni√®res m√©triques"""
    print("üîÑ V√©rification des derni√®res m√©triques...")
    
    query = f'''
    from(bucket: "{INFLUX_BUCKET}")
      |> range(start: -10m)
      |> filter(fn: (r) => r["_measurement"] == "snmp" or r["_measurement"] == "ping")
      |> last()
    '''
    
    result = query_influxdb(query)
    if result:
        print("‚úÖ Derni√®res m√©triques:")
        print(result)
        return True
    else:
        print("‚ùå Aucune m√©trique r√©cente trouv√©e")
        return False

def check_telegraf_metrics():
    """V√©rifie les m√©triques collect√©es par Telegraf"""
    print("üîÑ V√©rification des m√©triques Telegraf...")
    
    measurements = ["snmp", "ping", "cpu", "mem", "system"]
    
    for measurement in measurements:
        query = f'''
        from(bucket: "{INFLUX_BUCKET}")
          |> range(start: -30m)
          |> filter(fn: (r) => r["_measurement"] == "{measurement}")
          |> count()
        '''
        
        result = query_influxdb(query)
        if result and "0" not in result:
            print(f"‚úÖ {measurement}: Donn√©es pr√©sentes")
        else:
            print(f"‚ùå {measurement}: Pas de donn√©es")

def main():
    """Fonction principale"""
    print("=" * 60)
    print("üîç DIAGNOSTIC INFLUXDB")
    print("=" * 60)
    print(f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"URL: {INFLUX_URL}")
    print(f"Bucket: {INFLUX_BUCKET}")
    print(f"Organisation: {INFLUX_ORG}")
    print()
    
    # Tests s√©quentiels
    tests = [
        ("Connexion InfluxDB", test_influxdb_connection),
        ("Donn√©es dans le bucket", check_bucket_data),
        ("M√©triques SNMP", check_snmp_metrics),
        ("Derni√®res m√©triques", check_latest_metrics),
        ("M√©triques Telegraf", check_telegraf_metrics)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        result = test_func()
        results.append((test_name, result))
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("üìã R√âSUM√â DES TESTS")
    print("=" * 60)
    
    for test_name, result in results:
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHOU√â"
        print(f"{test_name:25} : {status}")
    
    successful_tests = sum(1 for _, result in results if result)
    print(f"\nR√©sultat global: {successful_tests}/{len(results)} tests r√©ussis")
    
    # Recommandations
    print("\n" + "=" * 60)
    print("üí° RECOMMANDATIONS")
    print("=" * 60)
    
    if successful_tests == 0:
        print("‚ùå Aucun test n'a r√©ussi. V√©rifiez:")
        print("   - Que le conteneur InfluxDB est d√©marr√©")
        print("   - La configuration du token et de l'organisation")
        print("   - Les ports (8086) sont accessibles")
    elif successful_tests < len(results):
        print("‚ö†Ô∏è  Quelques tests ont √©chou√©. V√©rifiez:")
        print("   - La configuration de Telegraf")
        print("   - Les donn√©es SNMP sont collect√©es")
        print("   - Les logs de Telegraf pour plus de d√©tails")
    else:
        print("‚úÖ Tous les tests ont r√©ussi!")
        print("   - InfluxDB fonctionne correctement")
        print("   - Les donn√©es sont collect√©es")

if __name__ == "__main__":
    main()
