#!/bin/bash

# Script d'installation du syst√®me d'alertes pour router_supervisor

set -e

echo "üöÄ Installation du syst√®me d'alertes pour router_supervisor"
echo "============================================================"

# R√©pertoire de base
BASE_DIR="/Users/paul/supervision-routeur-cisco"
ROUTER_SUPERVISOR_DIR="$BASE_DIR/router_supervisor"
VENV_PYTHON="$BASE_DIR/venv/bin/python"

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -d "$ROUTER_SUPERVISOR_DIR" ]; then
    echo "‚ùå Erreur: R√©pertoire router_supervisor non trouv√©"
    exit 1
fi

cd "$ROUTER_SUPERVISOR_DIR"

echo "üìÅ R√©pertoire de travail: $(pwd)"

# V√©rifier l'environnement virtuel
if [ ! -f "$VENV_PYTHON" ]; then
    echo "‚ùå Erreur: Environnement virtuel non trouv√© √† $VENV_PYTHON"
    exit 1
fi

echo "üêç Utilisation de Python: $VENV_PYTHON"

# Appliquer les migrations pour l'app core_models d'abord
echo "üì¶ Application des migrations core_models..."
PYTHONPATH="$ROUTER_SUPERVISOR_DIR" "$VENV_PYTHON" manage.py migrate core_models || echo "‚ö†Ô∏è  Migrations core_models d√©j√† appliqu√©es ou erreur mineure"

# Appliquer les migrations pour l'app alerts_app
echo "üì¶ Application des migrations alerts_app..."
PYTHONPATH="$ROUTER_SUPERVISOR_DIR" "$VENV_PYTHON" manage.py migrate alerts_app || echo "‚ö†Ô∏è  Migrations alerts_app d√©j√† appliqu√©es ou erreur mineure"

# Appliquer toutes les autres migrations
echo "üì¶ Application de toutes les migrations..."
PYTHONPATH="$ROUTER_SUPERVISOR_DIR" "$VENV_PYTHON" manage.py migrate || echo "‚ö†Ô∏è  Certaines migrations pourraient avoir √©chou√©"

# Cr√©er un superutilisateur si n√©cessaire
echo "üë§ V√©rification du superutilisateur..."
PYTHONPATH="$ROUTER_SUPERVISOR_DIR" "$VENV_PYTHON" -c "
import django
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'src.settings')
django.setup()
from django.contrib.auth import get_user_model
User = get_user_model()
if not User.objects.filter(is_superuser=True).exists():
    print('Cr√©ation d\\'un superutilisateur admin/admin...')
    User.objects.create_superuser('admin@admin.com', 'admin', first_name='Admin', last_name='User', role='admin')
    print('‚úÖ Superutilisateur cr√©√©: admin@admin.com / admin')
else:
    print('‚úÖ Superutilisateur d√©j√† existant')
" || echo "‚ö†Ô∏è  Probl√®me avec la cr√©ation du superutilisateur"

# Configurer le syst√®me d'alertes
echo "‚öôÔ∏è  Configuration du syst√®me d'alertes..."
PYTHONPATH="$ROUTER_SUPERVISOR_DIR" "$VENV_PYTHON" -c "
import django
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'src.settings')
django.setup()

from router_supervisor.core_models.models import Router, Threshold, KPI, Interface
from router_supervisor.alerts_app.models import AlertRule, Alert, AlertSeverity, AlertType
from router_supervisor.alerts_app.services import AlertService
from django.utils import timezone
from decimal import Decimal
import random

print('üìä Configuration des donn√©es de base...')

# Cr√©er des KPIs de base
kpis_data = [
    'CPU', 'RAM', 'Traffic', 'Interface Traffic', 'Interface Errors'
]

for kpi_name in kpis_data:
    kpi, created = KPI.objects.get_or_create(name=kpi_name)
    if created:
        print(f'  ‚úÖ KPI cr√©√©: {kpi_name}')

# Cr√©er des seuils de base si aucun n'existe
if not Threshold.objects.exists():
    thresholds_data = [
        {'name': 'Seuil Standard', 'cpu': 80, 'ram': 1024, 'traffic': 100},
        {'name': 'Seuil √âlev√©', 'cpu': 90, 'ram': 2048, 'traffic': 200},
        {'name': 'Seuil Critique', 'cpu': 95, 'ram': 4096, 'traffic': 500},
    ]
    
    for threshold_data in thresholds_data:
        threshold = Threshold.objects.create(**threshold_data)
        print(f'  ‚úÖ Seuil cr√©√©: {threshold.name}')

# Cr√©er un routeur de test si aucun n'existe
if not Router.objects.exists():
    threshold = Threshold.objects.first()
    router = Router.objects.create(
        name='Routeur-Test-01',
        ip_address='192.168.1.1',
        username='admin',
        password='password',
        secret='secret',
        threshold=threshold
    )
    print(f'  ‚úÖ Routeur de test cr√©√©: {router.name}')
    
    # Cr√©er une interface par d√©faut
    interface = Interface.objects.create(
        name='GigabitEthernet0/0',
        traffic=50.0,
        router=router,
        status='up',
        input_rate=25.0,
        output_rate=25.0,
        errors=0
    )
    print(f'  ‚úÖ Interface cr√©√©e: {interface.name}')

# Assigner des seuils aux routeurs sans seuils
routers_without_thresholds = Router.objects.filter(threshold__isnull=True)
for router in routers_without_thresholds:
    threshold = Threshold.objects.first()
    router.threshold = threshold
    router.save()
    print(f'  ‚úÖ Seuil assign√© au routeur: {router.name}')

# Cr√©er quelques r√®gles d'alertes
kpis = {kpi.name: kpi for kpi in KPI.objects.all()}

rules_data = [
    {
        'name': 'CPU Critique Global',
        'description': 'Alerte critique quand le CPU d√©passe 95%',
        'kpi': kpis.get('CPU'),
        'operator': 'gt',
        'threshold_value': Decimal('95'),
        'severity': AlertSeverity.CRITICAL,
        'alert_type': AlertType.THRESHOLD,
        'cooldown_minutes': 2,
    },
    {
        'name': 'M√©moire √âlev√©e',
        'description': 'Alerte quand la m√©moire d√©passe 3GB',
        'kpi': kpis.get('RAM'),
        'operator': 'gt',
        'threshold_value': Decimal('3072'),
        'severity': AlertSeverity.HIGH,
        'alert_type': AlertType.THRESHOLD,
        'cooldown_minutes': 5,
    },
]

for rule_data in rules_data:
    if rule_data['kpi']:
        rule, created = AlertRule.objects.get_or_create(
            name=rule_data['name'],
            kpi=rule_data['kpi'],
            defaults=rule_data
        )
        if created:
            print(f'  ‚úÖ R√®gle d\\'alerte cr√©√©e: {rule.name}')

# Cr√©er quelques alertes de test
router = Router.objects.first()
if router and not Alert.objects.exists():
    test_alerts = [
        {
            'title': 'Test: CPU Critique sur ' + router.name,
            'description': 'Alerte de test pour d√©monstration du syst√®me',
            'metric_name': 'CPU',
            'current_value': Decimal('98.5'),
            'threshold_value': Decimal('95.0'),
            'unit': '%',
            'severity': AlertSeverity.CRITICAL,
        },
        {
            'title': 'Test: M√©moire √âlev√©e sur ' + router.name,
            'description': 'Utilisation m√©moire au-dessus du seuil normal',
            'metric_name': 'RAM',
            'current_value': Decimal('3500'),
            'threshold_value': Decimal('3072'),
            'unit': 'MB',
            'severity': AlertSeverity.HIGH,
        },
        {
            'title': 'Test: Trafic Mod√©r√© sur ' + router.name,
            'description': 'Trafic r√©seau l√©g√®rement √©lev√©',
            'metric_name': 'Traffic',
            'current_value': Decimal('125'),
            'threshold_value': Decimal('100'),
            'unit': 'Mbps',
            'severity': AlertSeverity.MEDIUM,
        },
    ]
    
    for alert_data in test_alerts:
        alert = Alert.objects.create(
            router=router,
            kpi=kpis.get(alert_data['metric_name']),
            threshold=router.threshold,
            alert_type=AlertType.THRESHOLD,
            **alert_data
        )
        print(f'  ‚úÖ Alerte de test cr√©√©e: {alert.title}')

print('\\nüéâ Configuration du syst√®me d\\'alertes termin√©e!')
print('   üìä Acc√©dez au dashboard des alertes: http://localhost:8000/alerts/')
print('   üîß Admin interface: http://localhost:8000/admin/')

" || echo "‚ö†Ô∏è  Erreur lors de la configuration des donn√©es"

echo ""
echo "‚úÖ Installation termin√©e!"
echo ""
echo "üåê Pour d√©marrer le serveur de d√©veloppement:"
echo "   cd $ROUTER_SUPERVISOR_DIR"
echo "   PYTHONPATH=$ROUTER_SUPERVISOR_DIR $VENV_PYTHON manage.py runserver"
echo ""
echo "üìä URLs disponibles:"
echo "   ‚Ä¢ Dashboard principal: http://localhost:8000/"
echo "   ‚Ä¢ Dashboard des alertes: http://localhost:8000/alerts/"
echo "   ‚Ä¢ Liste des alertes: http://localhost:8000/alerts/list/"
echo "   ‚Ä¢ Administration: http://localhost:8000/admin/"
echo ""
echo "üë§ Connexion admin:"
echo "   ‚Ä¢ Email: admin@admin.com"
echo "   ‚Ä¢ Mot de passe: admin"
echo ""
