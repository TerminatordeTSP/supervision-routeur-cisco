# Telegraf processors configuration file
# This file contains processors to transform metrics to match API expectations

# Le processeur Json transforme les métriques en format JSON attendu par l'API Django
[[processors.converter]]
  # Le converter transforme les champs et tags des métriques
  order = 1
  
  # Créer un tag pour le routeur basé sur le hostname ou un tag existant
  [processors.converter.tags]
    router = ["hostname", "host"]
  
  # Rassembler les mesures importantes dans des champs appropriés
  [processors.converter.fields]
    # Convertir les mesures CPU en pourcentage
    cpu_usage = ["usage_system", "usage_user", "usage_idle"]
    
    # Convertir les mesures mémoire
    memory_usage = ["used_percent"]
    
    # Autres métriques
    traffic_mbps = ["bytes_recv", "bytes_sent"]

# Le processeur Starlark permet d'exécuter du code pour transformer les métriques
[[processors.starlark]]
  order = 2
  source = '''
def apply(metric):
    # Créer le format que notre API Django attend
    router_name = metric.tags.get("router") or metric.tags.get("host") or "unknown"
    
    # Préparer les métriques du routeur
    router_metrics = {}
    
    # CPU
    if "cpu_usage" in metric.fields:
        router_metrics["cpu_usage"] = metric.fields["cpu_usage"]
    elif "usage_system" in metric.fields:
        router_metrics["cpu_usage"] = metric.fields["usage_system"] + metric.fields.get("usage_user", 0)
    
    # Mémoire
    if "memory_usage" in metric.fields:
        router_metrics["memory_usage"] = metric.fields["memory_usage"]
    elif "used_percent" in metric.fields:
        router_metrics["memory_usage"] = metric.fields["used_percent"]
    
    # Trafic
    if "traffic_mbps" in metric.fields:
        router_metrics["traffic_mbps"] = metric.fields["traffic_mbps"]
    elif "bytes_recv" in metric.fields and "bytes_sent" in metric.fields:
        # Convertir octets/s en Mbps
        router_metrics["traffic_mbps"] = (metric.fields["bytes_recv"] + metric.fields["bytes_sent"]) * 8 / 1000000
    
    # Créer une nouvelle métrique au format attendu
    new_metric = metric.copy()
    new_metric.name = "router_metrics"
    new_metric.tags = {"router_name": router_name}
    new_metric.fields = {"router_metrics": router_metrics, "timestamp": int(metric.time.timestamp())}
    
    return new_metric
'''

# Le processeur Rename transforme les noms des métriques pour une meilleure lisibilité
[[processors.rename]]
  order = 3
  [[processors.rename.replace]]
    field = "router_metrics"
    dest = "data"
